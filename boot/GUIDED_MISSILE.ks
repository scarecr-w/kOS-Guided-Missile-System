GLOBAL LAUNCH_SUCCESSFUL IS FALSE.
GLOBAL LOGGING IS FALSE.

FUNCTION MAIN {
    IF LOGGING {
        SETUP_LOG_FILE().
    }
    UNTIL LAUNCH_SUCCESSFUL {
        WAIT_FOR_TARGET().
        LAUNCH().
    }
    SAS OFF.
    APPROACH_TARGET(ALT:RADAR-50, 3250).
    IMPACT_TARGET().
}

FUNCTION SETUP_LOG_FILE {
    LOCAL NAME IS "MISSILE".
    LOCAL I IS 1.
    UNTIL NOT EXISTS("0:/LOGS/" + NAME + "_" + CORE:PART:CID + "_" + I + ".LOG") {
        SET I TO I + 1.
    }
    GLOBAL LOG_FILE_PATH IS "0:/LOGS/" + NAME + "_" + CORE:PART:CID + "_" + I + ".LOG".
}

FUNCTION IMPACT_TARGET {

    PRINT "IMPACT STAGE".

    LOCAL DELTA_T IS 0.01.
    LOCAL KP IS 0.9.
    LOCAL KI IS 0.3.
    LOCAL KD IS 0.5.
    
    SET PID2 TO PIDLOOP(KP, KI, KD).

    LOCAL INITIAL_ALTITUDE IS SHIP:ALTITUDE.
    LOCAL TARGET_ALTITUDE IS TARGET_COORDS:TERRAINHEIGHT.
    LOCAL INITIAL_HEIGHT_ABOVE_TARGET IS 1.06 * INITIAL_ALTITUDE - TARGET_ALTITUDE+20.
    LOCAL INITIAL_DISTANCE IS TARGET_COORDS:DISTANCE.
    LOCAL INITIAL_GROUND_DISTANCE IS SQRT(INITIAL_DISTANCE^2 - INITIAL_HEIGHT_ABOVE_TARGET^2).
    LOCAL A IS -1 * INITIAL_HEIGHT_ABOVE_TARGET / INITIAL_GROUND_DISTANCE^2.

    UNTIL 0 {
        LOCAL CURR_HEIGHT_ABOVE_TARGET IS SHIP:ALTITUDE - TARGET_COORDS:TERRAINHEIGHT.
        LOCAL CURR_GROUND_DISTANCE IS SQRT(TARGET_COORDS:DISTANCE^2 - CURR_HEIGHT_ABOVE_TARGET^2).
        LOCAL GOAL_ALTITUDE IS A * (CURR_GROUND_DISTANCE - INITIAL_GROUND_DISTANCE) ^ 2 + INITIAL_ALTITUDE.
        SET PID2:SETPOINT TO -2 * A * (CURR_GROUND_DISTANCE - INITIAL_GROUND_DISTANCE) * SHIP:GROUNDSPEED.
        SET PITCH_TARGET TO -7 + PID2:UPDATE(TIME:SECONDS, SHIP:VERTICALSPEED).
        LOCAL CURR_ALTITUDE IS SHIP:ALTITUDE.
        LOCAL CURR_PITCH IS 90 - VECTORANGLE(SHIP:UP:FOREVECTOR, SHIP:FACING:FOREVECTOR).
        IF LOGGING {
            LOG CURR_ALTITUDE + ", " + (GOAL_ALTITUDE+0.06 * INITIAL_ALTITUDE+20) + ", " + CURR_PITCH + ", " + PITCH_TARGET + ", " + TARGET_COORDS:DISTANCE + ", " + PID2:SETPOINT + ", " + SHIP:VERTICALSPEED TO LOG_FILE_PATH.
        }
        WAIT DELTA_T.
    }
}

FUNCTION APPROACH_TARGET {
    CLEARSCREEN.
    PRINT "APPROACH STAGE".
    DECLARE PARAMETER GOAL_ALTITUDE.
    DECLARE PARAMETER SWITCH_DISTANCE.
    IF GOAL_ALTITUDE < 500 {
        SET GOAL_ALTITUDE TO 500.
    } ELSE IF GOAL_ALTITUDE > 1000 {
        SET GOAL_ALTITUDE TO 1000.
    }
    GLOBAL CRUISING_ALTITUDE IS GOAL_ALTITUDE.

    SET SWITCH_DISTANCE TO SWITCH_DISTANCE + GOAL_ALTITUDE - 500.

    LOCAL DELTA_T IS 0.01.
    LOCAL KP IS 0.08.
    LOCAL KI IS 0.002.
    LOCAL KD IS 0.175.

    SET PID TO PIDLOOP(KP, KI, KD, -25, 30).
    SET PID:SETPOINT TO GOAL_ALTITUDE.
    GLOBAL PITCH_TARGET IS 4.5.
    LOCK STEERING TO HEADING(TARGET_COORDS:HEADING, PITCH_TARGET).
    IF LOGGING {
        LOG "CURRENT ALTITUDE, GOAL ALTITUDE, CURRENT PITCH, GOAL PITCH, DISTANCE TO TARGET, GOAL VSPEED, CURRENT VSPEED" TO LOG_FILE_PATH.
    }
    
    UNTIL TARGET_COORDS:DISTANCE < SWITCH_DISTANCE {
        SET PITCH_TARGET TO 4.5 + PID:UPDATE(TIME:SECONDS, ALT:RADAR).
        LOCAL CURR_ALTITUDE IS SHIP:ALTITUDE.
        LOCAL CURR_PITCH IS 90 - vectorangle(ship:up:forevector, ship:facing:forevector).
        IF LOGGING {
            LOG CURR_ALTITUDE + ", " + (GOAL_ALTITUDE+MAX(0,SHIP:GEOPOSITION:TERRAINHEIGHT)) + ", " + CURR_PITCH + ", " + PITCH_TARGET + ", " + TARGET_COORDS:DISTANCE + ", " + 0 + ", " + SHIP:VERTICALSPEED TO LOG_FILE_PATH.
        }
        WAIT DELTA_T.
    }
}

FUNCTION WAIT_FOR_TARGET {
    PRINT "WAITING FOR TARGET".
    WAIT UNTIL NOT CORE:MESSAGES:EMPTY.
    GLOBAL TARGET_COORDS IS CORE:MESSAGES:POP:CONTENT.
    PRINT "RECIEVED TARGET: " + TARGET_COORDS.
}

FUNCTION LAUNCH {
    LOCAL DECOUPLER IS CORE:PART:DECOUPLER.
    IF DECOUPLER:MODULES:FIND("MODULEDECOUPLE") <> -1 {
        DECOUPLER:GETMODULE("MODULEDECOUPLE"):DOEVENT("DECOUPLE").
    } ELSE IF DECOUPLER:MODULES:FIND("MODULEANCHOREDDECOUPLER") <> -1 {
        DECOUPLER:GETMODULE("MODULEANCHOREDDECOUPLER"):DOEVENT("DECOUPLE").
    } ELSE {
        PRINT "UNABLE TO DECOUPLE".
        RETURN.
    }
    WAIT 0.5.
    LIST ENGINES IN ENGS.
    FOR ENG IN ENGS {
        ENG:ACTIVATE().
    }
    LOCK THROTTLE TO 1.0.
    SET LAUNCH_SUCCESSFUL TO TRUE.
}

MAIN().